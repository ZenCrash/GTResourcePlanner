@using GameResourcePlanner.Data
@using GameResourcePlanner.Pages

<div class="popup-overlay">
    <div class="popup-container">
        <h2>Select a Recipe or Add New Recipe</h2>
        <input type="text" @bind="searchText" placeholder="Search by output value" />
        <div class="recipe-list">
            @foreach (var recipe in filteredRecipes)
            {
                <div class="recipe-item">
                    <span>@recipe.MachineName</span>
                    <button @onclick="() => SelectRecipe(recipe)">Select</button>
                </div>
            }
        </div>
        <div class="new-recipe">
            <input type="text" @bind="newRecipeName" placeholder="New Recipe Name" />
            <button @onclick="AddNewRecipe">Add New Recipe</button>
            <button @onclick="ClosePopup">Cancel</button>
        </div>
    </div>
</div>

@code {
    [Parameter] public List<Recepie> Recipes { get; set; }
    [Parameter] public EventCallback<Recepie> RecipeSelected { get; set; }
    [Parameter] public EventCallback<string> NewRecipeAdded { get; set; }

    private string searchText = string.Empty;
    private List<Recepie> filteredRecipes;
    private string newRecipeName = string.Empty;

    protected override void OnParametersSet()
    {
        filteredRecipes = Recipes.Where(recipe =>
            recipe.Outputs.Values.Any(outputValue =>
                outputValue.ToString().Contains(searchText, StringComparison.OrdinalIgnoreCase)
            )
        ).ToList();
    }

    private void SelectRecipe(Recepie recipe)
    {
        RecipeSelected.InvokeAsync(recipe);
    }

    private void AddNewRecipe()
    {
        if (!string.IsNullOrWhiteSpace(newRecipeName))
        {
            NewRecipeAdded.InvokeAsync(newRecipeName);
            newRecipeName = string.Empty;
        }
    }

    private void ClosePopup()
    {
        searchText = string.Empty;
        RecipeSelected.InvokeAsync(null);
    }
}